pipeline {
    agent none
    stages {
        stage ('Get Code'){
            agent {
                label 'principal'
            }
            steps {
                sh 'echo "******************"'
                sh 'hostname'
                sh 'whoami'
                sh 'echo "******************"'
                //Optenemos el codigo de nuestro Git
                git url: 'http://github.com/santife/helloworld.git'
                stash name: 'archivos', includes: '**/*'
            }
        }
        

                stage('Rest') {
                    agent {
                        label 'principal'
                    }
                    steps {
                        sh 'echo "******************"'
                        sh 'hostname'
                        sh 'whoami'
                        sh 'echo "******************"'
                        catchError (buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                java -jar /var/lib/jenkins/workspace/wiremock-standalone-3.3.1.jar --port 9090 --root-dir test/wiremock/ &
                                sleep 3 
                                export FLASK_APP=app/api.py
                                export FLASK_ENV=development
                                flask run & 
                                export PYTHONPATH=$(pwd)
                                pytest --junitxml=result_rest.xml test/rest
                            '''
                        }
                    }
                }
        stage ('Parallel') {
            parallel {              
                stage('unit') {
                    agent {
                        label 'principal'
                    }
                    steps {
                        sh 'echo "******************"'
                        sh 'hostname'
                        sh 'whoami'
                        sh 'echo "******************"'
                        catchError (buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                export PYTHONPATH=$(pwd)
                                pytest --junitxml=result_unit.xml test/unit
                            '''
                            junit 'result*.xml'
                        }
                    }
                }

            
        
                stage ('Covertura') {
                    agent {
                        label 'nodo1'
                    }
                    steps {
                        unstash 'archivos'
                        sh 'echo "******************"'
                        sh 'hostname'
                        sh 'whoami'
                        sh 'echo "******************"'
                        catchError (buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                                coverage xml
                            '''
                            stash name: 'cobertura'
                            //cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90,70,80', lineCoverageTargets: '95,90,85'
                        }
                    }
                }
                
                stage('Static'){
                    agent {
                        label 'nodo2'
                    }
                    steps{
                        unstash 'archivos'
                        sh 'echo "******************"'
                        sh 'hostname'
                        sh 'whoami'
                        sh 'echo "******************"'
                        catchError (buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                export PYTHONPATH=$(pwd)
                                flake8 --exit-zero --format=pylint app >flake8.out
                            '''
                            stash name: 'flake8'
                            //recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unsatble: false]]
                        }
                    }
                }
                
                stage('Security'){
                    agent {
                        label 'nodo1'
                    }
                    steps{
                        unstash 'archivos'
                        sh 'echo "******************"'
                        sh 'hostname'
                        sh 'whoami'
                        sh 'echo "******************"'
                        catchError (buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh'''
                                bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}, {severity}] {msg}"
                            '''
                            stash name: 'bandit'
                            //recordIssues tools: [pyLint (name: 'bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                        }
                    }
                }
                
                stage('Performance'){
                    agent {
                        label 'nodo2'
                    }
                    steps{
                        unstash 'archivos'
                        sh 'echo "******************"'
                        sh 'hostname'
                        sh 'whoami'
                        sh 'echo "******************"'
                         
                        catchError (buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                export FLASK_APP=app/api.py
                                export FLASK_ENV=development
                                flask run &
                                /var/lib/jenkins/workspace/apache-jmeter-5.6.3/bin/jmeter.sh -n -t test.jmx -f -l test.jtl
                            '''
                            stash name: 'performance'
                            //perfReport sourceDataFiles: 'test.jtl'
                        }
                    }
                }
            }
        }
        
        stage ('resultados') {
            agent {
                label 'principal'
            }
            steps {
                unstash 'cobertura'
                cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90,70,80', lineCoverageTargets: '95,90,85'
                unstash 'flake8'
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unsatble: false]]
                unstash 'bandit'
                recordIssues tools: [pyLint (name: 'bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                unstash 'performance'
                perfReport sourceDataFiles: 'test.jtl'
            }
        }
    }
}
